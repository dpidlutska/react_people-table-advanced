{"version":3,"sources":["components/Navbar.tsx","App.tsx","pages/HomePage.tsx","components/Loader/Loader.tsx","utils/searchHelper.ts","components/SearchLink.tsx","utils/constats.ts","components/PeopleFilters.tsx","components/PersonLink.tsx","components/Person.tsx","components/PeopleTable.tsx","api.ts","utils/getPreparedPeople.ts","pages/PeoplePage.tsx","utils/getSortedPeople.ts","pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","cn","Navbar","className","role","to","App","HomePage","Loader","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","FILTER_BY_SEX","All","Male","Female","CENTURIES_TO_CHOOSE","SortTypes","COLUMNS_NAMES_NO_SORT","PeopleFilters","setSearchParams","query","get","sex","centuries","getAll","handleCenturyToggle","century","includes","filter","selectedCentury","map","type","placeholder","onChange","event","setSearchWith","target","length","PersonLink","person","slug","name","isFemale","Person","born","died","fatherName","motherName","mother","father","personSlug","useParams","PeopleTable","people","sort","order","newSortType","sortParams","columnName","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","filteredPeople","useMemo","sortType","visiblePeople","normalizedQuery","trim","toLowerCase","Math","ceil","personA","personB","Name","localeCompare","Sex","Born","Died","reverse","getSortedPeople","hasNoPeopleOnServer","hasNoFilteredPeopleToShow","useEffect","getPeople","peopleFromServer","find","getPreparedPeople","catch","finally","NotFoundPage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.84f4c88f.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => (\n  cn('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  })\n);\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getLinkClass}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"people\"\n            className={getLinkClass}\n            aria-current=\"page\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export const FEMALE = 'f';\nexport const EMPTY_PARENT_VALUE = '-';\nexport const FILTER_BY_SEX = {\n  All: null,\n  Male: 'm',\n  Female: 'f',\n};\n\nexport const CENTURIES_TO_CHOOSE = ['16', '17', '18', '19', '20'];\n\nexport enum SortTypes {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n\nexport const COLUMNS_NAMES_NO_SORT = [\n  'Mother',\n  'Father',\n];\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\nimport { CENTURIES_TO_CHOOSE, FILTER_BY_SEX } from '../utils/constats';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || null;\n  const centuries = searchParams.getAll('centuries') || [];\n\n  function setSearchWith(params: { query: string | null }) {\n    const search = getSearchWith(searchParams, params);\n\n    setSearchParams(search);\n  }\n\n  function handleQueryChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setSearchWith({ query: event.target.value || null });\n  }\n\n  function handleCenturyToggle(century: string) {\n    return centuries.includes(century)\n      ? centuries.filter(selectedCentury => selectedCentury !== century)\n      : [...centuries, century];\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(FILTER_BY_SEX).map(([key, value]) => (\n          <SearchLink\n            className={cn({\n              'is-active': sex === value,\n            })}\n            key={key}\n            params={{ sex: value }}\n          >\n            {key}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES_TO_CHOOSE.map(century => (\n              <SearchLink\n                data-cy=\"century\"\n                key={century}\n                className={cn('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{ centuries: handleCenturyToggle(century) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': centuries.length,\n              })}\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: [],\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { PersonType } from '../types';\nimport { FEMALE } from '../utils/constats';\n\ntype Props = {\n  person: PersonType;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { slug, sex, name } = person;\n\n  const isFemale = sex === FEMALE;\n\n  return (\n    <Link\n      to={slug}\n      className={cn({\n        'has-text-danger': isFemale,\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { PersonType } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { EMPTY_PARENT_VALUE } from '../utils/constats';\n\ntype Props = {\n  person: PersonType,\n};\n\nexport const Person: React.FC<Props> = ({ person }) => {\n  const {\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    slug,\n    mother,\n    father,\n  } = person;\n\n  const { personSlug } = useParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={cn({\n        'has-background-warning': slug === personSlug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <PersonLink person={mother} />\n        ) : (\n          motherName || EMPTY_PARENT_VALUE\n        )}\n      </td>\n      <td>\n        {father ? (\n          <PersonLink person={father} />\n        ) : (\n          fatherName || EMPTY_PARENT_VALUE\n        )}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { PersonType } from '../types';\nimport { Person } from './Person';\nimport { COLUMNS_NAMES_NO_SORT, SortTypes } from '../utils/constats';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../utils/searchHelper';\n\ntype Props = {\n  people: PersonType[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  function handleSort(newSortType: string): SearchParams {\n    const isFirstClick = sort !== newSortType;\n    const isSecondClick = sort === newSortType && !order;\n\n    if (isFirstClick) {\n      return { sort: newSortType, order: null };\n    }\n\n    if (isSecondClick) {\n      return { sort: newSortType, order: 'desc' };\n    }\n\n    return { sort: null, order: null };\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(SortTypes).map(([key, value]) => {\n            const sortParams = handleSort(value);\n\n            return (\n              <th key={key}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {key}\n                  <SearchLink params={sortParams}>\n                    <span className=\"icon\">\n                      <i className={cn('fas', {\n                        'fa-sort': sort !== value,\n                        'fa-sort-up': sort === value && !order,\n                        'fa-sort-down': sort === value && order,\n                      })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            );\n          })}\n\n          {COLUMNS_NAMES_NO_SORT.map(columnName => (\n            <th key={columnName}>\n              {columnName}\n            </th>\n          ))}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <Person person={person} key={person.slug} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { PersonType } from './types/PersonType';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<PersonType[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { PersonType } from '../types';\n\nexport const getPreparedPeople = (people: PersonType[]) => (\n  people.map(person => (\n    {\n      ...person,\n      mother: people.find(({ name }) => name === person.motherName),\n      father: people.find(({ name }) => name === person.fatherName),\n    }))\n);\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from '../components/Loader';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { PersonType } from '../types';\nimport { getPeople } from '../api';\nimport { getPreparedPeople } from '../utils/getPreparedPeople';\nimport { getSortedPeople } from '../utils/getSortedPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<PersonType[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || null;\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || null;\n  const order = searchParams.get('order') || null;\n\n  const filteredPeople = useMemo(() => getSortedPeople(\n    people,\n    sex,\n    query,\n    centuries,\n    sort,\n    order,\n  ), [people, sex, query, centuries, sort, order]);\n\n  const hasNoPeopleOnServer = !isLoading && !isError && !people.length;\n  const hasNoFilteredPeopleToShow = !!people.length && !filteredPeople.length;\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(peopleFromServer => {\n        setPeople(getPreparedPeople(peopleFromServer));\n        setIsError(false);\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {people.length && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n\n              {hasNoPeopleOnServer && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {hasNoFilteredPeopleToShow && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {!!filteredPeople.length && (\n                <PeopleTable people={filteredPeople} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { PersonType } from '../types';\nimport { SortTypes } from './constats';\n\nexport const getSortedPeople = (\n  people: PersonType[],\n  sex: string | null,\n  query: string,\n  centuries: string[],\n  sortType: string | null,\n  order: string | null,\n) => {\n  let visiblePeople = [...people];\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => (\n      person.sex === sex\n    ));\n  }\n\n  if (query) {\n    const normalizedQuery = query.trim().toLowerCase();\n\n    visiblePeople = visiblePeople.filter(person => (\n      person.name.toLowerCase().includes(normalizedQuery)\n      || person.fatherName?.toLowerCase().includes(normalizedQuery)\n      || person.motherName?.toLowerCase().includes(normalizedQuery)\n    ));\n  }\n\n  if (centuries.length) {\n    visiblePeople = visiblePeople.filter(\n      ({ born }) => centuries.includes((Math.ceil(born / 100)).toString()),\n    );\n  }\n\n  if (sortType) {\n    visiblePeople.sort((personA, personB) => {\n      switch (sortType) {\n        case SortTypes.Name:\n          return personA.name.localeCompare(personB.name);\n\n        case SortTypes.Sex:\n          return personA.sex.localeCompare(personB.sex);\n\n        case SortTypes.Born:\n          return personA.born - personB.born;\n\n        case SortTypes.Died:\n          return personA.died - personB.died;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order) {\n    visiblePeople.reverse();\n  }\n\n  return visiblePeople;\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"people\" element={<PeoplePage />}>\n          <Route path=\":personSlug\" />\n        </Route>\n\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}